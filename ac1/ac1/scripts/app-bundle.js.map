{"version":3,"sources":["app.ts","environment.ts","main.ts","resources/index.ts"],"names":[],"mappings":";;;IAGA;QAGI;YAFA,YAAO,GAAG,gBAAgB,CAAC;QAM3B,CAAC;QAED,mBAAK,GAAL;YACI,MAAM,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC;QAC7B,CAAC;QAED,sBAAQ,GAAR;YACI,IAAM,IAAI,GAAG,CAAC;oBACpB,KAAK,EAAE,KAAK;oBACZ,KAAK,EAAE,EAAE;iBACV,EAAC;oBACA,KAAK,EAAE,KAAK;oBACZ,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,KAAK,EAAE,KAAK;oBACZ,KAAK,EAAE,CAAC;iBACT,EAAE;oBACD,KAAK,EAAE,MAAM;oBACb,KAAK,EAAE,EAAE;iBACV,CAAC,CAAA;YAEI,IAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;iBAChC,SAAS,CAAC,GAAG,CAAC;iBACd,IAAI,CAAC,IAAI,CAAC;iBACV,KAAK,EAAE;iBACP,MAAM,CAAC,GAAG,CAAC,CAAA;YACd,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;iBACf,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC;iBACd,IAAI,CAAC,IAAI,EAAE,UAAC,CAAC,EAAE,CAAC,IAAI,OAAA,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,EAAE,EAAV,CAAU,CAAC;iBAC/B,IAAI,CAAC,GAAG,EAAE,UAAC,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAA;YAC3B,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;iBACb,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACb,IAAI,CAAC,GAAG,EAAE,UAAC,CAAC,EAAE,CAAC,IAAI,OAAA,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,EAAE,EAAV,CAAU,CAAC;iBAC9B,IAAI,CAAC,UAAC,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAA;QAClB,CAAC;QAEL,UAAC;IAAD,CA3CA,AA2CC,IAAA;IA3CY,kBAAG;;;;;;ICHhB,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;;ICEI,OAAQ,CAAC,MAAM,CAAC;QACpB,QAAQ,EAAE;YACR,gBAAgB,EAAE,KAAK;SACxB;KACF,CAAC,CAAC;IAEH,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAdD,8BAcC;;;;;;ICvBD,mBAA0B,MAA8B;IAExD,CAAC;IAFD,8BAEC","file":"app-bundle.js","sourcesContent":["import * as moment from 'moment';\nimport * as d3 from 'd3'\n\nexport class App {\n    message = 'Hello World! 2';\n\n    constructor() {\n\n\n\n    }\n\n    hello(): string {\n        return moment().format();\n    }\n\n    attached() {\n        const data = [{\n  label: \"7am\",\n  sales: 20\n},{\n  label: \"8am\",\n  sales: 12\n}, {\n  label: \"9am\",\n  sales: 8\n}, {\n  label: \"10am\",\n  sales: 27\n}]\n\n      const g = d3.select('#chart')\n  .selectAll(\"g\")\n  .data(data)\n  .enter()\n  .append('g')\ng.append(\"circle\")\n  .attr('cy', 40)\n  .attr('cx', (d, i)=> (i+1) * 50)\n  .attr('r', (d)=> d.sales)\ng.append(\"text\")\n  .attr('y', 90)\n  .attr('x', (d, i)=> (i+1) * 50)\n  .text((d)=> d.label)\n    }\n\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import 'bootstrap';\nimport {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":".."}